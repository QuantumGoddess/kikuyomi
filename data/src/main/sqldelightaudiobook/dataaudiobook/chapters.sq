import kotlin.Boolean;

CREATE TABLE chapters(
    _id INTEGER NOT NULL PRIMARY KEY,
    audiobook_id INTEGER NOT NULL,
    url TEXT NOT NULL,
    name TEXT NOT NULL,
    scanlator TEXT,
    read INTEGER AS Boolean NOT NULL,
    bookmark INTEGER AS Boolean NOT NULL,
    last_second_read INTEGER NOT NULL,
    total_seconds INTEGER NOT NULL,
    chapter_number REAL NOT NULL,
    source_order INTEGER NOT NULL,
    date_fetch INTEGER NOT NULL,
    date_upload INTEGER NOT NULL,
    last_modified_at INTEGER NOT NULL DEFAULT 0,
    FOREIGN KEY(audiobook_id) REFERENCES audiobooks (_id)
    ON DELETE CASCADE
);

CREATE INDEX chapters_audiobook_id_index ON chapters(audiobook_id);
CREATE INDEX chapters_unread_by_audiobook_index ON chapters(audiobook_id, read) WHERE read = 0;

CREATE TRIGGER update_last_modified_at_chapters
AFTER UPDATE ON chapters
FOR EACH ROW
BEGIN
  UPDATE chapters
  SET last_modified_at = strftime('%s', 'now')
  WHERE _id = new._id;
END;

getChapterById:
SELECT *
FROM chapters
WHERE _id = :id;

getChaptersByAudiobookId:
SELECT *
FROM chapters
WHERE audiobook_id = :audiobookId;

getBookmarkedChaptersByAudiobookId:
SELECT *
FROM chapters
WHERE bookmark
AND audiobook_id = :audiobookId;


getChapterByUrl:
SELECT *
FROM chapters
WHERE url = :chapterUrl;

getChapterByUrlAndAudiobookId:
SELECT *
FROM chapters
WHERE url = :chapterUrl
AND audiobook_id = :audiobookId;

removeChaptersWithIds:
DELETE FROM chapters
WHERE _id IN :chapterIds;

insert:
INSERT INTO chapters(audiobook_id, url, name, scanlator, read, bookmark, last_second_read, total_seconds, chapter_number, source_order, date_fetch, date_upload, last_modified_at)
VALUES (:audiobookId, :url, :name, :scanlator, :read, :bookmark, :lastSecondRead, :totalSeconds, :chapterNumber, :sourceOrder, :dateFetch, :dateUpload, strftime('%s', 'now'));

update:
UPDATE chapters
SET audiobook_id = coalesce(:audiobookId, audiobook_id),
    url = coalesce(:url, url),
    name = coalesce(:name, name),
    scanlator = coalesce(:scanlator, scanlator),
    read = coalesce(:read, read),
    bookmark = coalesce(:bookmark, bookmark),
    last_second_read = coalesce(:lastSecondRead, last_second_read),
    total_seconds = coalesce(:totalSeconds, total_seconds),
    chapter_number = coalesce(:chapterNumber, chapter_number),
    source_order = coalesce(:sourceOrder, source_order),
    date_fetch = coalesce(:dateFetch, date_fetch),
    date_upload = coalesce(:dateUpload, date_upload)
WHERE _id = :chapterId;

selectLastInsertedRowId:
SELECT last_insert_rowid();